// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/likude/ent/topic"
	"github.com/Faroukhamadi/likude/ent/topicrelated"
)

// TopicRelatedCreate is the builder for creating a TopicRelated entity.
type TopicRelatedCreate struct {
	config
	mutation *TopicRelatedMutation
	hooks    []Hook
}

// SetTopicID sets the "topic_id" field.
func (trc *TopicRelatedCreate) SetTopicID(i int) *TopicRelatedCreate {
	trc.mutation.SetTopicID(i)
	return trc
}

// SetRelatedTopicID sets the "related_topic_id" field.
func (trc *TopicRelatedCreate) SetRelatedTopicID(i int) *TopicRelatedCreate {
	trc.mutation.SetRelatedTopicID(i)
	return trc
}

// SetTopic sets the "topic" edge to the Topic entity.
func (trc *TopicRelatedCreate) SetTopic(t *Topic) *TopicRelatedCreate {
	return trc.SetTopicID(t.ID)
}

// SetRelatedTopic sets the "related_topic" edge to the Topic entity.
func (trc *TopicRelatedCreate) SetRelatedTopic(t *Topic) *TopicRelatedCreate {
	return trc.SetRelatedTopicID(t.ID)
}

// Mutation returns the TopicRelatedMutation object of the builder.
func (trc *TopicRelatedCreate) Mutation() *TopicRelatedMutation {
	return trc.mutation
}

// Save creates the TopicRelated in the database.
func (trc *TopicRelatedCreate) Save(ctx context.Context) (*TopicRelated, error) {
	var (
		err  error
		node *TopicRelated
	)
	if len(trc.hooks) == 0 {
		if err = trc.check(); err != nil {
			return nil, err
		}
		node, err = trc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = trc.check(); err != nil {
				return nil, err
			}
			trc.mutation = mutation
			if node, err = trc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(trc.hooks) - 1; i >= 0; i-- {
			if trc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = trc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, trc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopicRelated)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopicRelatedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TopicRelatedCreate) SaveX(ctx context.Context) *TopicRelated {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TopicRelatedCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TopicRelatedCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TopicRelatedCreate) check() error {
	if _, ok := trc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "TopicRelated.topic_id"`)}
	}
	if _, ok := trc.mutation.RelatedTopicID(); !ok {
		return &ValidationError{Name: "related_topic_id", err: errors.New(`ent: missing required field "TopicRelated.related_topic_id"`)}
	}
	if _, ok := trc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "TopicRelated.topic"`)}
	}
	if _, ok := trc.mutation.RelatedTopicID(); !ok {
		return &ValidationError{Name: "related_topic", err: errors.New(`ent: missing required edge "TopicRelated.related_topic"`)}
	}
	return nil
}

func (trc *TopicRelatedCreate) sqlSave(ctx context.Context) (*TopicRelated, error) {
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (trc *TopicRelatedCreate) createSpec() (*TopicRelated, *sqlgraph.CreateSpec) {
	var (
		_node = &TopicRelated{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: topicrelated.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topicrelated.FieldID,
			},
		}
	)
	if nodes := trc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.RelatedTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelatedTopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TopicRelatedCreateBulk is the builder for creating many TopicRelated entities in bulk.
type TopicRelatedCreateBulk struct {
	config
	builders []*TopicRelatedCreate
}

// Save creates the TopicRelated entities in the database.
func (trcb *TopicRelatedCreateBulk) Save(ctx context.Context) ([]*TopicRelated, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TopicRelated, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicRelatedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TopicRelatedCreateBulk) SaveX(ctx context.Context) []*TopicRelated {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TopicRelatedCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TopicRelatedCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
