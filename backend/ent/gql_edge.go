// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (c *Comment) Post(ctx context.Context) (*Post, error) {
	result, err := c.Edges.PostOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryPost().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Comment) Replies(ctx context.Context) ([]*Reply, error) {
	result, err := c.Edges.RepliesOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryReplies().All(ctx)
	}
	return result, err
}

func (c *Community) Users(ctx context.Context) ([]*User, error) {
	result, err := c.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryUsers().All(ctx)
	}
	return result, err
}

func (po *Post) Writer(ctx context.Context) (*User, error) {
	result, err := po.Edges.WriterOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryWriter().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := po.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryComments().All(ctx)
	}
	return result, err
}

func (r *Reply) Comment(ctx context.Context) (*Comment, error) {
	result, err := r.Edges.CommentOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryComment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Topic) RelatedTopics(ctx context.Context) ([]*Topic, error) {
	result, err := t.Edges.RelatedTopicsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryRelatedTopics().All(ctx)
	}
	return result, err
}

func (t *Topic) TopicRelations(ctx context.Context) ([]*TopicRelated, error) {
	result, err := t.Edges.TopicRelationsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTopicRelations().All(ctx)
	}
	return result, err
}

func (tr *TopicRelated) Topic(ctx context.Context) (*Topic, error) {
	result, err := tr.Edges.TopicOrErr()
	if IsNotLoaded(err) {
		result, err = tr.QueryTopic().Only(ctx)
	}
	return result, err
}

func (tr *TopicRelated) RelatedTopic(ctx context.Context) (*Topic, error) {
	result, err := tr.Edges.RelatedTopicOrErr()
	if IsNotLoaded(err) {
		result, err = tr.QueryRelatedTopic().Only(ctx)
	}
	return result, err
}

func (u *User) Posts(ctx context.Context) ([]*Post, error) {
	result, err := u.Edges.PostsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryPosts().All(ctx)
	}
	return result, err
}

func (u *User) Communities(ctx context.Context) ([]*Community, error) {
	result, err := u.Edges.CommunitiesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryCommunities().All(ctx)
	}
	return result, err
}
