// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/likude/ent/predicate"
	"github.com/Faroukhamadi/likude/ent/topic"
	"github.com/Faroukhamadi/likude/ent/topicrelated"
)

// TopicRelatedUpdate is the builder for updating TopicRelated entities.
type TopicRelatedUpdate struct {
	config
	hooks    []Hook
	mutation *TopicRelatedMutation
}

// Where appends a list predicates to the TopicRelatedUpdate builder.
func (tru *TopicRelatedUpdate) Where(ps ...predicate.TopicRelated) *TopicRelatedUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetTopicID sets the "topic_id" field.
func (tru *TopicRelatedUpdate) SetTopicID(i int) *TopicRelatedUpdate {
	tru.mutation.SetTopicID(i)
	return tru
}

// SetRelatedTopicID sets the "related_topic_id" field.
func (tru *TopicRelatedUpdate) SetRelatedTopicID(i int) *TopicRelatedUpdate {
	tru.mutation.SetRelatedTopicID(i)
	return tru
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tru *TopicRelatedUpdate) SetTopic(t *Topic) *TopicRelatedUpdate {
	return tru.SetTopicID(t.ID)
}

// SetRelatedTopic sets the "related_topic" edge to the Topic entity.
func (tru *TopicRelatedUpdate) SetRelatedTopic(t *Topic) *TopicRelatedUpdate {
	return tru.SetRelatedTopicID(t.ID)
}

// Mutation returns the TopicRelatedMutation object of the builder.
func (tru *TopicRelatedUpdate) Mutation() *TopicRelatedMutation {
	return tru.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tru *TopicRelatedUpdate) ClearTopic() *TopicRelatedUpdate {
	tru.mutation.ClearTopic()
	return tru
}

// ClearRelatedTopic clears the "related_topic" edge to the Topic entity.
func (tru *TopicRelatedUpdate) ClearRelatedTopic() *TopicRelatedUpdate {
	tru.mutation.ClearRelatedTopic()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TopicRelatedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tru.hooks) == 0 {
		if err = tru.check(); err != nil {
			return 0, err
		}
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tru.check(); err != nil {
				return 0, err
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TopicRelatedUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TopicRelatedUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TopicRelatedUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TopicRelatedUpdate) check() error {
	if _, ok := tru.mutation.TopicID(); tru.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicRelated.topic"`)
	}
	if _, ok := tru.mutation.RelatedTopicID(); tru.mutation.RelatedTopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicRelated.related_topic"`)
	}
	return nil
}

func (tru *TopicRelatedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topicrelated.Table,
			Columns: topicrelated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topicrelated.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.RelatedTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RelatedTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topicrelated.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TopicRelatedUpdateOne is the builder for updating a single TopicRelated entity.
type TopicRelatedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicRelatedMutation
}

// SetTopicID sets the "topic_id" field.
func (truo *TopicRelatedUpdateOne) SetTopicID(i int) *TopicRelatedUpdateOne {
	truo.mutation.SetTopicID(i)
	return truo
}

// SetRelatedTopicID sets the "related_topic_id" field.
func (truo *TopicRelatedUpdateOne) SetRelatedTopicID(i int) *TopicRelatedUpdateOne {
	truo.mutation.SetRelatedTopicID(i)
	return truo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (truo *TopicRelatedUpdateOne) SetTopic(t *Topic) *TopicRelatedUpdateOne {
	return truo.SetTopicID(t.ID)
}

// SetRelatedTopic sets the "related_topic" edge to the Topic entity.
func (truo *TopicRelatedUpdateOne) SetRelatedTopic(t *Topic) *TopicRelatedUpdateOne {
	return truo.SetRelatedTopicID(t.ID)
}

// Mutation returns the TopicRelatedMutation object of the builder.
func (truo *TopicRelatedUpdateOne) Mutation() *TopicRelatedMutation {
	return truo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (truo *TopicRelatedUpdateOne) ClearTopic() *TopicRelatedUpdateOne {
	truo.mutation.ClearTopic()
	return truo
}

// ClearRelatedTopic clears the "related_topic" edge to the Topic entity.
func (truo *TopicRelatedUpdateOne) ClearRelatedTopic() *TopicRelatedUpdateOne {
	truo.mutation.ClearRelatedTopic()
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TopicRelatedUpdateOne) Select(field string, fields ...string) *TopicRelatedUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TopicRelated entity.
func (truo *TopicRelatedUpdateOne) Save(ctx context.Context) (*TopicRelated, error) {
	var (
		err  error
		node *TopicRelated
	)
	if len(truo.hooks) == 0 {
		if err = truo.check(); err != nil {
			return nil, err
		}
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = truo.check(); err != nil {
				return nil, err
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, truo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TopicRelated)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopicRelatedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TopicRelatedUpdateOne) SaveX(ctx context.Context) *TopicRelated {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TopicRelatedUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TopicRelatedUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TopicRelatedUpdateOne) check() error {
	if _, ok := truo.mutation.TopicID(); truo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicRelated.topic"`)
	}
	if _, ok := truo.mutation.RelatedTopicID(); truo.mutation.RelatedTopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TopicRelated.related_topic"`)
	}
	return nil
}

func (truo *TopicRelatedUpdateOne) sqlSave(ctx context.Context) (_node *TopicRelated, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topicrelated.Table,
			Columns: topicrelated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topicrelated.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TopicRelated.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topicrelated.FieldID)
		for _, f := range fields {
			if !topicrelated.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topicrelated.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.RelatedTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RelatedTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TopicRelated{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topicrelated.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
