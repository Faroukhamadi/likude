// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString},
		{Name: "points", Type: field.TypeFloat64},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
	}
	// CommunitiesColumns holds the columns for the "communities" table.
	CommunitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "about", Type: field.TypeString},
	}
	// CommunitiesTable holds the schema information for the "communities" table.
	CommunitiesTable = &schema.Table{
		Name:       "communities",
		Columns:    CommunitiesColumns,
		PrimaryKey: []*schema.Column{CommunitiesColumns[0]},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "points", Type: field.TypeFloat64},
		{Name: "user_posts", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RepliesColumns holds the columns for the "replies" table.
	RepliesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString},
		{Name: "points", Type: field.TypeFloat64},
	}
	// RepliesTable holds the schema information for the "replies" table.
	RepliesTable = &schema.Table{
		Name:       "replies",
		Columns:    RepliesColumns,
		PrimaryKey: []*schema.Column{RepliesColumns[0]},
	}
	// TopicsColumns holds the columns for the "topics" table.
	TopicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// TopicsTable holds the schema information for the "topics" table.
	TopicsTable = &schema.Table{
		Name:       "topics",
		Columns:    TopicsColumns,
		PrimaryKey: []*schema.Column{TopicsColumns[0]},
	}
	// TopicRelatedsColumns holds the columns for the "topic_relateds" table.
	TopicRelatedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "topic_id", Type: field.TypeInt},
		{Name: "related_topic_id", Type: field.TypeInt},
	}
	// TopicRelatedsTable holds the schema information for the "topic_relateds" table.
	TopicRelatedsTable = &schema.Table{
		Name:       "topic_relateds",
		Columns:    TopicRelatedsColumns,
		PrimaryKey: []*schema.Column{TopicRelatedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topic_relateds_topics_topic",
				Columns:    []*schema.Column{TopicRelatedsColumns[1]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "topic_relateds_topics_related_topic",
				Columns:    []*schema.Column{TopicRelatedsColumns[2]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "topicrelated_topic_id_related_topic_id",
				Unique:  true,
				Columns: []*schema.Column{TopicRelatedsColumns[1], TopicRelatedsColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "karma", Type: field.TypeInt, Nullable: true, Default: 0},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// CommentRepliesColumns holds the columns for the "comment_replies" table.
	CommentRepliesColumns = []*schema.Column{
		{Name: "comment_id", Type: field.TypeInt},
		{Name: "reply_id", Type: field.TypeInt},
	}
	// CommentRepliesTable holds the schema information for the "comment_replies" table.
	CommentRepliesTable = &schema.Table{
		Name:       "comment_replies",
		Columns:    CommentRepliesColumns,
		PrimaryKey: []*schema.Column{CommentRepliesColumns[0], CommentRepliesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comment_replies_comment_id",
				Columns:    []*schema.Column{CommentRepliesColumns[0]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "comment_replies_reply_id",
				Columns:    []*schema.Column{CommentRepliesColumns[1]},
				RefColumns: []*schema.Column{RepliesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CommunityUsersColumns holds the columns for the "community_users" table.
	CommunityUsersColumns = []*schema.Column{
		{Name: "community_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// CommunityUsersTable holds the schema information for the "community_users" table.
	CommunityUsersTable = &schema.Table{
		Name:       "community_users",
		Columns:    CommunityUsersColumns,
		PrimaryKey: []*schema.Column{CommunityUsersColumns[0], CommunityUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "community_users_community_id",
				Columns:    []*schema.Column{CommunityUsersColumns[0]},
				RefColumns: []*schema.Column{CommunitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "community_users_user_id",
				Columns:    []*schema.Column{CommunityUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PostCommentsColumns holds the columns for the "post_comments" table.
	PostCommentsColumns = []*schema.Column{
		{Name: "post_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// PostCommentsTable holds the schema information for the "post_comments" table.
	PostCommentsTable = &schema.Table{
		Name:       "post_comments",
		Columns:    PostCommentsColumns,
		PrimaryKey: []*schema.Column{PostCommentsColumns[0], PostCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_comments_post_id",
				Columns:    []*schema.Column{PostCommentsColumns[0]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "post_comments_comment_id",
				Columns:    []*schema.Column{PostCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommentsTable,
		CommunitiesTable,
		PostsTable,
		RepliesTable,
		TopicsTable,
		TopicRelatedsTable,
		UsersTable,
		CommentRepliesTable,
		CommunityUsersTable,
		PostCommentsTable,
	}
)

func init() {
	PostsTable.ForeignKeys[0].RefTable = UsersTable
	TopicRelatedsTable.ForeignKeys[0].RefTable = TopicsTable
	TopicRelatedsTable.ForeignKeys[1].RefTable = TopicsTable
	CommentRepliesTable.ForeignKeys[0].RefTable = CommentsTable
	CommentRepliesTable.ForeignKeys[1].RefTable = RepliesTable
	CommunityUsersTable.ForeignKeys[0].RefTable = CommunitiesTable
	CommunityUsersTable.ForeignKeys[1].RefTable = UsersTable
	PostCommentsTable.ForeignKeys[0].RefTable = PostsTable
	PostCommentsTable.ForeignKeys[1].RefTable = CommentsTable
}
