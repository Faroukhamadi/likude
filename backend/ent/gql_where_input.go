// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/Faroukhamadi/likude/ent/comment"
	"github.com/Faroukhamadi/likude/ent/community"
	"github.com/Faroukhamadi/likude/ent/post"
	"github.com/Faroukhamadi/likude/ent/predicate"
	"github.com/Faroukhamadi/likude/ent/reply"
	"github.com/Faroukhamadi/likude/ent/topic"
	"github.com/Faroukhamadi/likude/ent/topicrelated"
	"github.com/Faroukhamadi/likude/ent/user"
)

// CommentWhereInput represents a where input for filtering Comment queries.
type CommentWhereInput struct {
	Predicates []predicate.Comment  `json:"-"`
	Not        *CommentWhereInput   `json:"not,omitempty"`
	Or         []*CommentWhereInput `json:"or,omitempty"`
	And        []*CommentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "points" field predicates.
	Points      *float32  `json:"points,omitempty"`
	PointsNEQ   *float32  `json:"pointsNEQ,omitempty"`
	PointsIn    []float32 `json:"pointsIn,omitempty"`
	PointsNotIn []float32 `json:"pointsNotIn,omitempty"`
	PointsGT    *float32  `json:"pointsGT,omitempty"`
	PointsGTE   *float32  `json:"pointsGTE,omitempty"`
	PointsLT    *float32  `json:"pointsLT,omitempty"`
	PointsLTE   *float32  `json:"pointsLTE,omitempty"`

	// "post" edge predicates.
	HasPost     *bool             `json:"hasPost,omitempty"`
	HasPostWith []*PostWhereInput `json:"hasPostWith,omitempty"`

	// "replies" edge predicates.
	HasReplies     *bool              `json:"hasReplies,omitempty"`
	HasRepliesWith []*ReplyWhereInput `json:"hasRepliesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CommentWhereInput) AddPredicates(predicates ...predicate.Comment) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CommentWhereInput filter on the CommentQuery builder.
func (i *CommentWhereInput) Filter(q *CommentQuery) (*CommentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCommentWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCommentWhereInput is returned in case the CommentWhereInput is empty.
var ErrEmptyCommentWhereInput = errors.New("ent: empty predicate CommentWhereInput")

// P returns a predicate for filtering comments.
// An error is returned if the input is empty or invalid.
func (i *CommentWhereInput) P() (predicate.Comment, error) {
	var predicates []predicate.Comment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, comment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Comment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, comment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Comment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, comment.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, comment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, comment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, comment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, comment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, comment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, comment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, comment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, comment.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, comment.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, comment.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, comment.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, comment.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, comment.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, comment.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, comment.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, comment.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, comment.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, comment.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, comment.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, comment.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, comment.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, comment.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, comment.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Content != nil {
		predicates = append(predicates, comment.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, comment.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, comment.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, comment.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, comment.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, comment.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, comment.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, comment.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, comment.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, comment.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, comment.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, comment.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, comment.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Points != nil {
		predicates = append(predicates, comment.PointsEQ(*i.Points))
	}
	if i.PointsNEQ != nil {
		predicates = append(predicates, comment.PointsNEQ(*i.PointsNEQ))
	}
	if len(i.PointsIn) > 0 {
		predicates = append(predicates, comment.PointsIn(i.PointsIn...))
	}
	if len(i.PointsNotIn) > 0 {
		predicates = append(predicates, comment.PointsNotIn(i.PointsNotIn...))
	}
	if i.PointsGT != nil {
		predicates = append(predicates, comment.PointsGT(*i.PointsGT))
	}
	if i.PointsGTE != nil {
		predicates = append(predicates, comment.PointsGTE(*i.PointsGTE))
	}
	if i.PointsLT != nil {
		predicates = append(predicates, comment.PointsLT(*i.PointsLT))
	}
	if i.PointsLTE != nil {
		predicates = append(predicates, comment.PointsLTE(*i.PointsLTE))
	}

	if i.HasPost != nil {
		p := comment.HasPost()
		if !*i.HasPost {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostWith))
		for _, w := range i.HasPostWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasPostWith(with...))
	}
	if i.HasReplies != nil {
		p := comment.HasReplies()
		if !*i.HasReplies {
			p = comment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRepliesWith) > 0 {
		with := make([]predicate.Reply, 0, len(i.HasRepliesWith))
		for _, w := range i.HasRepliesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRepliesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, comment.HasRepliesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCommentWhereInput
	case 1:
		return predicates[0], nil
	default:
		return comment.And(predicates...), nil
	}
}

// CommunityWhereInput represents a where input for filtering Community queries.
type CommunityWhereInput struct {
	Predicates []predicate.Community  `json:"-"`
	Not        *CommunityWhereInput   `json:"not,omitempty"`
	Or         []*CommunityWhereInput `json:"or,omitempty"`
	And        []*CommunityWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "about" field predicates.
	About             *string  `json:"about,omitempty"`
	AboutNEQ          *string  `json:"aboutNEQ,omitempty"`
	AboutIn           []string `json:"aboutIn,omitempty"`
	AboutNotIn        []string `json:"aboutNotIn,omitempty"`
	AboutGT           *string  `json:"aboutGT,omitempty"`
	AboutGTE          *string  `json:"aboutGTE,omitempty"`
	AboutLT           *string  `json:"aboutLT,omitempty"`
	AboutLTE          *string  `json:"aboutLTE,omitempty"`
	AboutContains     *string  `json:"aboutContains,omitempty"`
	AboutHasPrefix    *string  `json:"aboutHasPrefix,omitempty"`
	AboutHasSuffix    *string  `json:"aboutHasSuffix,omitempty"`
	AboutEqualFold    *string  `json:"aboutEqualFold,omitempty"`
	AboutContainsFold *string  `json:"aboutContainsFold,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CommunityWhereInput) AddPredicates(predicates ...predicate.Community) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CommunityWhereInput filter on the CommunityQuery builder.
func (i *CommunityWhereInput) Filter(q *CommunityQuery) (*CommunityQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCommunityWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCommunityWhereInput is returned in case the CommunityWhereInput is empty.
var ErrEmptyCommunityWhereInput = errors.New("ent: empty predicate CommunityWhereInput")

// P returns a predicate for filtering communities.
// An error is returned if the input is empty or invalid.
func (i *CommunityWhereInput) P() (predicate.Community, error) {
	var predicates []predicate.Community
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, community.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Community, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, community.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Community, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, community.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, community.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, community.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, community.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, community.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, community.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, community.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, community.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, community.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, community.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, community.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, community.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, community.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, community.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, community.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, community.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, community.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, community.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, community.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, community.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, community.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, community.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, community.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, community.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, community.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, community.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, community.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, community.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, community.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, community.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, community.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, community.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, community.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, community.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, community.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, community.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, community.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, community.NameContainsFold(*i.NameContainsFold))
	}
	if i.About != nil {
		predicates = append(predicates, community.AboutEQ(*i.About))
	}
	if i.AboutNEQ != nil {
		predicates = append(predicates, community.AboutNEQ(*i.AboutNEQ))
	}
	if len(i.AboutIn) > 0 {
		predicates = append(predicates, community.AboutIn(i.AboutIn...))
	}
	if len(i.AboutNotIn) > 0 {
		predicates = append(predicates, community.AboutNotIn(i.AboutNotIn...))
	}
	if i.AboutGT != nil {
		predicates = append(predicates, community.AboutGT(*i.AboutGT))
	}
	if i.AboutGTE != nil {
		predicates = append(predicates, community.AboutGTE(*i.AboutGTE))
	}
	if i.AboutLT != nil {
		predicates = append(predicates, community.AboutLT(*i.AboutLT))
	}
	if i.AboutLTE != nil {
		predicates = append(predicates, community.AboutLTE(*i.AboutLTE))
	}
	if i.AboutContains != nil {
		predicates = append(predicates, community.AboutContains(*i.AboutContains))
	}
	if i.AboutHasPrefix != nil {
		predicates = append(predicates, community.AboutHasPrefix(*i.AboutHasPrefix))
	}
	if i.AboutHasSuffix != nil {
		predicates = append(predicates, community.AboutHasSuffix(*i.AboutHasSuffix))
	}
	if i.AboutEqualFold != nil {
		predicates = append(predicates, community.AboutEqualFold(*i.AboutEqualFold))
	}
	if i.AboutContainsFold != nil {
		predicates = append(predicates, community.AboutContainsFold(*i.AboutContainsFold))
	}

	if i.HasUsers != nil {
		p := community.HasUsers()
		if !*i.HasUsers {
			p = community.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, community.HasUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCommunityWhereInput
	case 1:
		return predicates[0], nil
	default:
		return community.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "points" field predicates.
	Points      *float64  `json:"points,omitempty"`
	PointsNEQ   *float64  `json:"pointsNEQ,omitempty"`
	PointsIn    []float64 `json:"pointsIn,omitempty"`
	PointsNotIn []float64 `json:"pointsNotIn,omitempty"`
	PointsGT    *float64  `json:"pointsGT,omitempty"`
	PointsGTE   *float64  `json:"pointsGTE,omitempty"`
	PointsLT    *float64  `json:"pointsLT,omitempty"`
	PointsLTE   *float64  `json:"pointsLTE,omitempty"`

	// "writer" edge predicates.
	HasWriter     *bool             `json:"hasWriter,omitempty"`
	HasWriterWith []*UserWhereInput `json:"hasWriterWith,omitempty"`

	// "comments" edge predicates.
	HasComments     *bool                `json:"hasComments,omitempty"`
	HasCommentsWith []*CommentWhereInput `json:"hasCommentsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostWhereInput is returned in case the PostWhereInput is empty.
var ErrEmptyPostWhereInput = errors.New("ent: empty predicate PostWhereInput")

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, post.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, post.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, post.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, post.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, post.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, post.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, post.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, post.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, post.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, post.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, post.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, post.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, post.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, post.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, post.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, post.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, post.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, post.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, post.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, post.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, post.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, post.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, post.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, post.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, post.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, post.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, post.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, post.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, post.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, post.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, post.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, post.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, post.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, post.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, post.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, post.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, post.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, post.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, post.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, post.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, post.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Points != nil {
		predicates = append(predicates, post.PointsEQ(*i.Points))
	}
	if i.PointsNEQ != nil {
		predicates = append(predicates, post.PointsNEQ(*i.PointsNEQ))
	}
	if len(i.PointsIn) > 0 {
		predicates = append(predicates, post.PointsIn(i.PointsIn...))
	}
	if len(i.PointsNotIn) > 0 {
		predicates = append(predicates, post.PointsNotIn(i.PointsNotIn...))
	}
	if i.PointsGT != nil {
		predicates = append(predicates, post.PointsGT(*i.PointsGT))
	}
	if i.PointsGTE != nil {
		predicates = append(predicates, post.PointsGTE(*i.PointsGTE))
	}
	if i.PointsLT != nil {
		predicates = append(predicates, post.PointsLT(*i.PointsLT))
	}
	if i.PointsLTE != nil {
		predicates = append(predicates, post.PointsLTE(*i.PointsLTE))
	}

	if i.HasWriter != nil {
		p := post.HasWriter()
		if !*i.HasWriter {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWriterWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasWriterWith))
		for _, w := range i.HasWriterWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWriterWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasWriterWith(with...))
	}
	if i.HasComments != nil {
		p := post.HasComments()
		if !*i.HasComments {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentsWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentsWith))
		for _, w := range i.HasCommentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasCommentsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostWhereInput
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// ReplyWhereInput represents a where input for filtering Reply queries.
type ReplyWhereInput struct {
	Predicates []predicate.Reply  `json:"-"`
	Not        *ReplyWhereInput   `json:"not,omitempty"`
	Or         []*ReplyWhereInput `json:"or,omitempty"`
	And        []*ReplyWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "points" field predicates.
	Points      *float32  `json:"points,omitempty"`
	PointsNEQ   *float32  `json:"pointsNEQ,omitempty"`
	PointsIn    []float32 `json:"pointsIn,omitempty"`
	PointsNotIn []float32 `json:"pointsNotIn,omitempty"`
	PointsGT    *float32  `json:"pointsGT,omitempty"`
	PointsGTE   *float32  `json:"pointsGTE,omitempty"`
	PointsLT    *float32  `json:"pointsLT,omitempty"`
	PointsLTE   *float32  `json:"pointsLTE,omitempty"`

	// "comment" edge predicates.
	HasComment     *bool                `json:"hasComment,omitempty"`
	HasCommentWith []*CommentWhereInput `json:"hasCommentWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ReplyWhereInput) AddPredicates(predicates ...predicate.Reply) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ReplyWhereInput filter on the ReplyQuery builder.
func (i *ReplyWhereInput) Filter(q *ReplyQuery) (*ReplyQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyReplyWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyReplyWhereInput is returned in case the ReplyWhereInput is empty.
var ErrEmptyReplyWhereInput = errors.New("ent: empty predicate ReplyWhereInput")

// P returns a predicate for filtering replies.
// An error is returned if the input is empty or invalid.
func (i *ReplyWhereInput) P() (predicate.Reply, error) {
	var predicates []predicate.Reply
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, reply.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Reply, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, reply.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Reply, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, reply.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, reply.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, reply.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, reply.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, reply.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, reply.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, reply.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, reply.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, reply.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, reply.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, reply.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, reply.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, reply.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, reply.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, reply.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, reply.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, reply.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, reply.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, reply.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, reply.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, reply.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, reply.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, reply.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, reply.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, reply.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Content != nil {
		predicates = append(predicates, reply.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, reply.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, reply.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, reply.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, reply.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, reply.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, reply.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, reply.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, reply.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, reply.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, reply.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, reply.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, reply.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.Points != nil {
		predicates = append(predicates, reply.PointsEQ(*i.Points))
	}
	if i.PointsNEQ != nil {
		predicates = append(predicates, reply.PointsNEQ(*i.PointsNEQ))
	}
	if len(i.PointsIn) > 0 {
		predicates = append(predicates, reply.PointsIn(i.PointsIn...))
	}
	if len(i.PointsNotIn) > 0 {
		predicates = append(predicates, reply.PointsNotIn(i.PointsNotIn...))
	}
	if i.PointsGT != nil {
		predicates = append(predicates, reply.PointsGT(*i.PointsGT))
	}
	if i.PointsGTE != nil {
		predicates = append(predicates, reply.PointsGTE(*i.PointsGTE))
	}
	if i.PointsLT != nil {
		predicates = append(predicates, reply.PointsLT(*i.PointsLT))
	}
	if i.PointsLTE != nil {
		predicates = append(predicates, reply.PointsLTE(*i.PointsLTE))
	}

	if i.HasComment != nil {
		p := reply.HasComment()
		if !*i.HasComment {
			p = reply.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommentWith) > 0 {
		with := make([]predicate.Comment, 0, len(i.HasCommentWith))
		for _, w := range i.HasCommentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, reply.HasCommentWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyReplyWhereInput
	case 1:
		return predicates[0], nil
	default:
		return reply.And(predicates...), nil
	}
}

// TopicWhereInput represents a where input for filtering Topic queries.
type TopicWhereInput struct {
	Predicates []predicate.Topic  `json:"-"`
	Not        *TopicWhereInput   `json:"not,omitempty"`
	Or         []*TopicWhereInput `json:"or,omitempty"`
	And        []*TopicWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "related_topics" edge predicates.
	HasRelatedTopics     *bool              `json:"hasRelatedTopics,omitempty"`
	HasRelatedTopicsWith []*TopicWhereInput `json:"hasRelatedTopicsWith,omitempty"`

	// "topic_relations" edge predicates.
	HasTopicRelations     *bool                     `json:"hasTopicRelations,omitempty"`
	HasTopicRelationsWith []*TopicRelatedWhereInput `json:"hasTopicRelationsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TopicWhereInput) AddPredicates(predicates ...predicate.Topic) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TopicWhereInput filter on the TopicQuery builder.
func (i *TopicWhereInput) Filter(q *TopicQuery) (*TopicQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTopicWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTopicWhereInput is returned in case the TopicWhereInput is empty.
var ErrEmptyTopicWhereInput = errors.New("ent: empty predicate TopicWhereInput")

// P returns a predicate for filtering topics.
// An error is returned if the input is empty or invalid.
func (i *TopicWhereInput) P() (predicate.Topic, error) {
	var predicates []predicate.Topic
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, topic.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Topic, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, topic.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Topic, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, topic.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, topic.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, topic.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, topic.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, topic.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, topic.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, topic.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, topic.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, topic.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, topic.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, topic.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, topic.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, topic.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, topic.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, topic.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, topic.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, topic.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, topic.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, topic.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, topic.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, topic.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, topic.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasRelatedTopics != nil {
		p := topic.HasRelatedTopics()
		if !*i.HasRelatedTopics {
			p = topic.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRelatedTopicsWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasRelatedTopicsWith))
		for _, w := range i.HasRelatedTopicsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRelatedTopicsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topic.HasRelatedTopicsWith(with...))
	}
	if i.HasTopicRelations != nil {
		p := topic.HasTopicRelations()
		if !*i.HasTopicRelations {
			p = topic.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTopicRelationsWith) > 0 {
		with := make([]predicate.TopicRelated, 0, len(i.HasTopicRelationsWith))
		for _, w := range i.HasTopicRelationsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTopicRelationsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topic.HasTopicRelationsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTopicWhereInput
	case 1:
		return predicates[0], nil
	default:
		return topic.And(predicates...), nil
	}
}

// TopicRelatedWhereInput represents a where input for filtering TopicRelated queries.
type TopicRelatedWhereInput struct {
	Predicates []predicate.TopicRelated  `json:"-"`
	Not        *TopicRelatedWhereInput   `json:"not,omitempty"`
	Or         []*TopicRelatedWhereInput `json:"or,omitempty"`
	And        []*TopicRelatedWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "topic_id" field predicates.
	TopicID      *int  `json:"topicID,omitempty"`
	TopicIDNEQ   *int  `json:"topicIDNEQ,omitempty"`
	TopicIDIn    []int `json:"topicIDIn,omitempty"`
	TopicIDNotIn []int `json:"topicIDNotIn,omitempty"`

	// "related_topic_id" field predicates.
	RelatedTopicID      *int  `json:"relatedTopicID,omitempty"`
	RelatedTopicIDNEQ   *int  `json:"relatedTopicIDNEQ,omitempty"`
	RelatedTopicIDIn    []int `json:"relatedTopicIDIn,omitempty"`
	RelatedTopicIDNotIn []int `json:"relatedTopicIDNotIn,omitempty"`

	// "topic" edge predicates.
	HasTopic     *bool              `json:"hasTopic,omitempty"`
	HasTopicWith []*TopicWhereInput `json:"hasTopicWith,omitempty"`

	// "related_topic" edge predicates.
	HasRelatedTopic     *bool              `json:"hasRelatedTopic,omitempty"`
	HasRelatedTopicWith []*TopicWhereInput `json:"hasRelatedTopicWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TopicRelatedWhereInput) AddPredicates(predicates ...predicate.TopicRelated) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TopicRelatedWhereInput filter on the TopicRelatedQuery builder.
func (i *TopicRelatedWhereInput) Filter(q *TopicRelatedQuery) (*TopicRelatedQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTopicRelatedWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTopicRelatedWhereInput is returned in case the TopicRelatedWhereInput is empty.
var ErrEmptyTopicRelatedWhereInput = errors.New("ent: empty predicate TopicRelatedWhereInput")

// P returns a predicate for filtering topicrelateds.
// An error is returned if the input is empty or invalid.
func (i *TopicRelatedWhereInput) P() (predicate.TopicRelated, error) {
	var predicates []predicate.TopicRelated
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, topicrelated.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TopicRelated, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, topicrelated.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TopicRelated, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, topicrelated.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, topicrelated.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, topicrelated.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, topicrelated.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, topicrelated.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, topicrelated.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, topicrelated.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, topicrelated.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, topicrelated.IDLTE(*i.IDLTE))
	}
	if i.TopicID != nil {
		predicates = append(predicates, topicrelated.TopicIDEQ(*i.TopicID))
	}
	if i.TopicIDNEQ != nil {
		predicates = append(predicates, topicrelated.TopicIDNEQ(*i.TopicIDNEQ))
	}
	if len(i.TopicIDIn) > 0 {
		predicates = append(predicates, topicrelated.TopicIDIn(i.TopicIDIn...))
	}
	if len(i.TopicIDNotIn) > 0 {
		predicates = append(predicates, topicrelated.TopicIDNotIn(i.TopicIDNotIn...))
	}
	if i.RelatedTopicID != nil {
		predicates = append(predicates, topicrelated.RelatedTopicIDEQ(*i.RelatedTopicID))
	}
	if i.RelatedTopicIDNEQ != nil {
		predicates = append(predicates, topicrelated.RelatedTopicIDNEQ(*i.RelatedTopicIDNEQ))
	}
	if len(i.RelatedTopicIDIn) > 0 {
		predicates = append(predicates, topicrelated.RelatedTopicIDIn(i.RelatedTopicIDIn...))
	}
	if len(i.RelatedTopicIDNotIn) > 0 {
		predicates = append(predicates, topicrelated.RelatedTopicIDNotIn(i.RelatedTopicIDNotIn...))
	}

	if i.HasTopic != nil {
		p := topicrelated.HasTopic()
		if !*i.HasTopic {
			p = topicrelated.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTopicWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasTopicWith))
		for _, w := range i.HasTopicWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTopicWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topicrelated.HasTopicWith(with...))
	}
	if i.HasRelatedTopic != nil {
		p := topicrelated.HasRelatedTopic()
		if !*i.HasRelatedTopic {
			p = topicrelated.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRelatedTopicWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasRelatedTopicWith))
		for _, w := range i.HasRelatedTopicWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRelatedTopicWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topicrelated.HasRelatedTopicWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTopicRelatedWhereInput
	case 1:
		return predicates[0], nil
	default:
		return topicrelated.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "karma" field predicates.
	Karma       *int  `json:"karma,omitempty"`
	KarmaNEQ    *int  `json:"karmaNEQ,omitempty"`
	KarmaIn     []int `json:"karmaIn,omitempty"`
	KarmaNotIn  []int `json:"karmaNotIn,omitempty"`
	KarmaGT     *int  `json:"karmaGT,omitempty"`
	KarmaGTE    *int  `json:"karmaGTE,omitempty"`
	KarmaLT     *int  `json:"karmaLT,omitempty"`
	KarmaLTE    *int  `json:"karmaLTE,omitempty"`
	KarmaIsNil  bool  `json:"karmaIsNil,omitempty"`
	KarmaNotNil bool  `json:"karmaNotNil,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "communities" edge predicates.
	HasCommunities     *bool                  `json:"hasCommunities,omitempty"`
	HasCommunitiesWith []*CommunityWhereInput `json:"hasCommunitiesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Karma != nil {
		predicates = append(predicates, user.KarmaEQ(*i.Karma))
	}
	if i.KarmaNEQ != nil {
		predicates = append(predicates, user.KarmaNEQ(*i.KarmaNEQ))
	}
	if len(i.KarmaIn) > 0 {
		predicates = append(predicates, user.KarmaIn(i.KarmaIn...))
	}
	if len(i.KarmaNotIn) > 0 {
		predicates = append(predicates, user.KarmaNotIn(i.KarmaNotIn...))
	}
	if i.KarmaGT != nil {
		predicates = append(predicates, user.KarmaGT(*i.KarmaGT))
	}
	if i.KarmaGTE != nil {
		predicates = append(predicates, user.KarmaGTE(*i.KarmaGTE))
	}
	if i.KarmaLT != nil {
		predicates = append(predicates, user.KarmaLT(*i.KarmaLT))
	}
	if i.KarmaLTE != nil {
		predicates = append(predicates, user.KarmaLTE(*i.KarmaLTE))
	}
	if i.KarmaIsNil {
		predicates = append(predicates, user.KarmaIsNil())
	}
	if i.KarmaNotNil {
		predicates = append(predicates, user.KarmaNotNil())
	}

	if i.HasPosts != nil {
		p := user.HasPosts()
		if !*i.HasPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPostsWith(with...))
	}
	if i.HasCommunities != nil {
		p := user.HasCommunities()
		if !*i.HasCommunities {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCommunitiesWith) > 0 {
		with := make([]predicate.Community, 0, len(i.HasCommunitiesWith))
		for _, w := range i.HasCommunitiesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCommunitiesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCommunitiesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
