// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CommentQuery) CollectFields(ctx context.Context, satisfies ...string) *CommentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CommentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CommentQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CommunityQuery) CollectFields(ctx context.Context, satisfies ...string) *CommunityQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CommunityQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CommunityQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PostQuery) CollectFields(ctx context.Context, satisfies ...string) *PostQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		po = po.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return po
}

func (po *PostQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *PostQuery {
	return po
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *ReplyQuery) CollectFields(ctx context.Context, satisfies ...string) *ReplyQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *ReplyQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ReplyQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SubreplyQuery) CollectFields(ctx context.Context, satisfies ...string) *SubreplyQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *SubreplyQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SubreplyQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TopicQuery) CollectFields(ctx context.Context, satisfies ...string) *TopicQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TopicQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TopicQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tr *TopicRelatedQuery) CollectFields(ctx context.Context, satisfies ...string) *TopicRelatedQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		tr = tr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return tr
}

func (tr *TopicRelatedQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TopicRelatedQuery {
	return tr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
