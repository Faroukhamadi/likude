// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/Faroukhamadi/likude/ent/comment"
	"github.com/Faroukhamadi/likude/ent/community"
	"github.com/Faroukhamadi/likude/ent/post"
	"github.com/Faroukhamadi/likude/ent/predicate"
	"github.com/Faroukhamadi/likude/ent/reply"
	"github.com/Faroukhamadi/likude/ent/topic"
	"github.com/Faroukhamadi/likude/ent/topicrelated"
	"github.com/Faroukhamadi/likude/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 7)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   comment.Table,
			Columns: comment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comment.FieldID,
			},
		},
		Type: "Comment",
		Fields: map[string]*sqlgraph.FieldSpec{
			comment.FieldCreatedAt: {Type: field.TypeTime, Column: comment.FieldCreatedAt},
			comment.FieldUpdatedAt: {Type: field.TypeTime, Column: comment.FieldUpdatedAt},
			comment.FieldContent:   {Type: field.TypeString, Column: comment.FieldContent},
			comment.FieldPoints:    {Type: field.TypeFloat64, Column: comment.FieldPoints},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: community.FieldID,
			},
		},
		Type: "Community",
		Fields: map[string]*sqlgraph.FieldSpec{
			community.FieldCreatedAt: {Type: field.TypeTime, Column: community.FieldCreatedAt},
			community.FieldUpdatedAt: {Type: field.TypeTime, Column: community.FieldUpdatedAt},
			community.FieldName:      {Type: field.TypeString, Column: community.FieldName},
			community.FieldAbout:     {Type: field.TypeString, Column: community.FieldAbout},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreatedAt: {Type: field.TypeTime, Column: post.FieldCreatedAt},
			post.FieldUpdatedAt: {Type: field.TypeTime, Column: post.FieldUpdatedAt},
			post.FieldTitle:     {Type: field.TypeString, Column: post.FieldTitle},
			post.FieldContent:   {Type: field.TypeString, Column: post.FieldContent},
			post.FieldPoints:    {Type: field.TypeFloat64, Column: post.FieldPoints},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reply.Table,
			Columns: reply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reply.FieldID,
			},
		},
		Type: "Reply",
		Fields: map[string]*sqlgraph.FieldSpec{
			reply.FieldCreatedAt: {Type: field.TypeTime, Column: reply.FieldCreatedAt},
			reply.FieldUpdatedAt: {Type: field.TypeTime, Column: reply.FieldUpdatedAt},
			reply.FieldContent:   {Type: field.TypeString, Column: reply.FieldContent},
			reply.FieldPoints:    {Type: field.TypeFloat64, Column: reply.FieldPoints},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topic.Table,
			Columns: topic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topic.FieldID,
			},
		},
		Type: "Topic",
		Fields: map[string]*sqlgraph.FieldSpec{
			topic.FieldName: {Type: field.TypeString, Column: topic.FieldName},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topicrelated.Table,
			Columns: topicrelated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topicrelated.FieldID,
			},
		},
		Type: "TopicRelated",
		Fields: map[string]*sqlgraph.FieldSpec{
			topicrelated.FieldTopicID:        {Type: field.TypeInt, Column: topicrelated.FieldTopicID},
			topicrelated.FieldRelatedTopicID: {Type: field.TypeInt, Column: topicrelated.FieldRelatedTopicID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldUsername:  {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldKarma:     {Type: field.TypeInt, Column: user.FieldKarma},
		},
	}
	graph.MustAddE(
		"post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   comment.PostTable,
			Columns: comment.PostPrimaryKey,
			Bidi:    false,
		},
		"Comment",
		"Post",
	)
	graph.MustAddE(
		"replies",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comment.RepliesTable,
			Columns: comment.RepliesPrimaryKey,
			Bidi:    false,
		},
		"Comment",
		"Reply",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   community.UsersTable,
			Columns: community.UsersPrimaryKey,
			Bidi:    false,
		},
		"Community",
		"User",
	)
	graph.MustAddE(
		"writer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.WriterTable,
			Columns: []string{post.WriterColumn},
			Bidi:    false,
		},
		"Post",
		"User",
	)
	graph.MustAddE(
		"comments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: post.CommentsPrimaryKey,
			Bidi:    false,
		},
		"Post",
		"Comment",
	)
	graph.MustAddE(
		"comment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
		},
		"Reply",
		"Comment",
	)
	graph.MustAddE(
		"related_topics",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   topic.RelatedTopicsTable,
			Columns: topic.RelatedTopicsPrimaryKey,
			Bidi:    true,
		},
		"Topic",
		"Topic",
	)
	graph.MustAddE(
		"topic_relations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.TopicRelationsTable,
			Columns: []string{topic.TopicRelationsColumn},
			Bidi:    false,
		},
		"Topic",
		"TopicRelated",
	)
	graph.MustAddE(
		"topic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.TopicTable,
			Columns: []string{topicrelated.TopicColumn},
			Bidi:    false,
		},
		"TopicRelated",
		"Topic",
	)
	graph.MustAddE(
		"related_topic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   topicrelated.RelatedTopicTable,
			Columns: []string{topicrelated.RelatedTopicColumn},
			Bidi:    false,
		},
		"TopicRelated",
		"Topic",
	)
	graph.MustAddE(
		"posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
		},
		"User",
		"Post",
	)
	graph.MustAddE(
		"communities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CommunitiesTable,
			Columns: user.CommunitiesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Community",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommentQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommentQuery builder.
func (cq *CommentQuery) Filter() *CommentFilter {
	return &CommentFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommentMutation builder.
func (m *CommentMutation) Filter() *CommentFilter {
	return &CommentFilter{config: m.config, predicateAdder: m}
}

// CommentFilter provides a generic filtering capability at runtime for CommentQuery.
type CommentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CommentFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(comment.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(comment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(comment.FieldUpdatedAt))
}

// WhereContent applies the entql string predicate on the content field.
func (f *CommentFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(comment.FieldContent))
}

// WherePoints applies the entql float64 predicate on the points field.
func (f *CommentFilter) WherePoints(p entql.Float64P) {
	f.Where(p.Field(comment.FieldPoints))
}

// WhereHasPost applies a predicate to check if query has an edge post.
func (f *CommentFilter) WhereHasPost() {
	f.Where(entql.HasEdge("post"))
}

// WhereHasPostWith applies a predicate to check if query has an edge post with a given conditions (other predicates).
func (f *CommentFilter) WhereHasPostWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReplies applies a predicate to check if query has an edge replies.
func (f *CommentFilter) WhereHasReplies() {
	f.Where(entql.HasEdge("replies"))
}

// WhereHasRepliesWith applies a predicate to check if query has an edge replies with a given conditions (other predicates).
func (f *CommentFilter) WhereHasRepliesWith(preds ...predicate.Reply) {
	f.Where(entql.HasEdgeWith("replies", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommunityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommunityQuery builder.
func (cq *CommunityQuery) Filter() *CommunityFilter {
	return &CommunityFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommunityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommunityMutation builder.
func (m *CommunityMutation) Filter() *CommunityFilter {
	return &CommunityFilter{config: m.config, predicateAdder: m}
}

// CommunityFilter provides a generic filtering capability at runtime for CommunityQuery.
type CommunityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommunityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CommunityFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(community.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommunityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(community.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommunityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(community.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *CommunityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(community.FieldName))
}

// WhereAbout applies the entql string predicate on the about field.
func (f *CommunityFilter) WhereAbout(p entql.StringP) {
	f.Where(p.Field(community.FieldAbout))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *CommunityFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *CommunityFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (pq *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PostFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PostFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldUpdatedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PostFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(post.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PostFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(post.FieldContent))
}

// WherePoints applies the entql float64 predicate on the points field.
func (f *PostFilter) WherePoints(p entql.Float64P) {
	f.Where(p.Field(post.FieldPoints))
}

// WhereHasWriter applies a predicate to check if query has an edge writer.
func (f *PostFilter) WhereHasWriter() {
	f.Where(entql.HasEdge("writer"))
}

// WhereHasWriterWith applies a predicate to check if query has an edge writer with a given conditions (other predicates).
func (f *PostFilter) WhereHasWriterWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("writer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComments applies a predicate to check if query has an edge comments.
func (f *PostFilter) WhereHasComments() {
	f.Where(entql.HasEdge("comments"))
}

// WhereHasCommentsWith applies a predicate to check if query has an edge comments with a given conditions (other predicates).
func (f *PostFilter) WhereHasCommentsWith(preds ...predicate.Comment) {
	f.Where(entql.HasEdgeWith("comments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ReplyQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReplyQuery builder.
func (rq *ReplyQuery) Filter() *ReplyFilter {
	return &ReplyFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReplyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReplyMutation builder.
func (m *ReplyMutation) Filter() *ReplyFilter {
	return &ReplyFilter{config: m.config, predicateAdder: m}
}

// ReplyFilter provides a generic filtering capability at runtime for ReplyQuery.
type ReplyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReplyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ReplyFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(reply.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReplyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reply.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReplyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reply.FieldUpdatedAt))
}

// WhereContent applies the entql string predicate on the content field.
func (f *ReplyFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(reply.FieldContent))
}

// WherePoints applies the entql float64 predicate on the points field.
func (f *ReplyFilter) WherePoints(p entql.Float64P) {
	f.Where(p.Field(reply.FieldPoints))
}

// WhereHasComment applies a predicate to check if query has an edge comment.
func (f *ReplyFilter) WhereHasComment() {
	f.Where(entql.HasEdge("comment"))
}

// WhereHasCommentWith applies a predicate to check if query has an edge comment with a given conditions (other predicates).
func (f *ReplyFilter) WhereHasCommentWith(preds ...predicate.Comment) {
	f.Where(entql.HasEdgeWith("comment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TopicQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopicQuery builder.
func (tq *TopicQuery) Filter() *TopicFilter {
	return &TopicFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopicMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopicMutation builder.
func (m *TopicMutation) Filter() *TopicFilter {
	return &TopicFilter{config: m.config, predicateAdder: m}
}

// TopicFilter provides a generic filtering capability at runtime for TopicQuery.
type TopicFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopicFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TopicFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(topic.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TopicFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(topic.FieldName))
}

// WhereHasRelatedTopics applies a predicate to check if query has an edge related_topics.
func (f *TopicFilter) WhereHasRelatedTopics() {
	f.Where(entql.HasEdge("related_topics"))
}

// WhereHasRelatedTopicsWith applies a predicate to check if query has an edge related_topics with a given conditions (other predicates).
func (f *TopicFilter) WhereHasRelatedTopicsWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("related_topics", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTopicRelations applies a predicate to check if query has an edge topic_relations.
func (f *TopicFilter) WhereHasTopicRelations() {
	f.Where(entql.HasEdge("topic_relations"))
}

// WhereHasTopicRelationsWith applies a predicate to check if query has an edge topic_relations with a given conditions (other predicates).
func (f *TopicFilter) WhereHasTopicRelationsWith(preds ...predicate.TopicRelated) {
	f.Where(entql.HasEdgeWith("topic_relations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (trq *TopicRelatedQuery) addPredicate(pred func(s *sql.Selector)) {
	trq.predicates = append(trq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopicRelatedQuery builder.
func (trq *TopicRelatedQuery) Filter() *TopicRelatedFilter {
	return &TopicRelatedFilter{config: trq.config, predicateAdder: trq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopicRelatedMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopicRelatedMutation builder.
func (m *TopicRelatedMutation) Filter() *TopicRelatedFilter {
	return &TopicRelatedFilter{config: m.config, predicateAdder: m}
}

// TopicRelatedFilter provides a generic filtering capability at runtime for TopicRelatedQuery.
type TopicRelatedFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopicRelatedFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TopicRelatedFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(topicrelated.FieldID))
}

// WhereTopicID applies the entql int predicate on the topic_id field.
func (f *TopicRelatedFilter) WhereTopicID(p entql.IntP) {
	f.Where(p.Field(topicrelated.FieldTopicID))
}

// WhereRelatedTopicID applies the entql int predicate on the related_topic_id field.
func (f *TopicRelatedFilter) WhereRelatedTopicID(p entql.IntP) {
	f.Where(p.Field(topicrelated.FieldRelatedTopicID))
}

// WhereHasTopic applies a predicate to check if query has an edge topic.
func (f *TopicRelatedFilter) WhereHasTopic() {
	f.Where(entql.HasEdge("topic"))
}

// WhereHasTopicWith applies a predicate to check if query has an edge topic with a given conditions (other predicates).
func (f *TopicRelatedFilter) WhereHasTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("topic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRelatedTopic applies a predicate to check if query has an edge related_topic.
func (f *TopicRelatedFilter) WhereHasRelatedTopic() {
	f.Where(entql.HasEdge("related_topic"))
}

// WhereHasRelatedTopicWith applies a predicate to check if query has an edge related_topic with a given conditions (other predicates).
func (f *TopicRelatedFilter) WhereHasRelatedTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("related_topic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereKarma applies the entql int predicate on the karma field.
func (f *UserFilter) WhereKarma(p entql.IntP) {
	f.Where(p.Field(user.FieldKarma))
}

// WhereHasPosts applies a predicate to check if query has an edge posts.
func (f *UserFilter) WhereHasPosts() {
	f.Where(entql.HasEdge("posts"))
}

// WhereHasPostsWith applies a predicate to check if query has an edge posts with a given conditions (other predicates).
func (f *UserFilter) WhereHasPostsWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommunities applies a predicate to check if query has an edge communities.
func (f *UserFilter) WhereHasCommunities() {
	f.Where(entql.HasEdge("communities"))
}

// WhereHasCommunitiesWith applies a predicate to check if query has an edge communities with a given conditions (other predicates).
func (f *UserFilter) WhereHasCommunitiesWith(preds ...predicate.Community) {
	f.Where(entql.HasEdgeWith("communities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
