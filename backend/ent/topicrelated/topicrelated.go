// Code generated by ent, DO NOT EDIT.

package topicrelated

const (
	// Label holds the string label denoting the topicrelated type in the database.
	Label = "topic_related"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// FieldRelatedTopicID holds the string denoting the related_topic_id field in the database.
	FieldRelatedTopicID = "related_topic_id"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// EdgeRelatedTopic holds the string denoting the related_topic edge name in mutations.
	EdgeRelatedTopic = "related_topic"
	// Table holds the table name of the topicrelated in the database.
	Table = "topic_relateds"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "topic_relateds"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
	// RelatedTopicTable is the table that holds the related_topic relation/edge.
	RelatedTopicTable = "topic_relateds"
	// RelatedTopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	RelatedTopicInverseTable = "topics"
	// RelatedTopicColumn is the table column denoting the related_topic relation/edge.
	RelatedTopicColumn = "related_topic_id"
)

// Columns holds all SQL columns for topicrelated fields.
var Columns = []string{
	FieldID,
	FieldTopicID,
	FieldRelatedTopicID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
