// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/likude/ent/comment"
	"github.com/Faroukhamadi/likude/ent/predicate"
	"github.com/Faroukhamadi/likude/ent/reply"
)

// ReplyUpdate is the builder for updating Reply entities.
type ReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ReplyMutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ru *ReplyUpdate) Where(ps ...predicate.Reply) *ReplyUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReplyUpdate) SetUpdatedAt(t time.Time) *ReplyUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetContent sets the "content" field.
func (ru *ReplyUpdate) SetContent(s string) *ReplyUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetPoints sets the "points" field.
func (ru *ReplyUpdate) SetPoints(f float64) *ReplyUpdate {
	ru.mutation.ResetPoints()
	ru.mutation.SetPoints(f)
	return ru
}

// AddPoints adds f to the "points" field.
func (ru *ReplyUpdate) AddPoints(f float64) *ReplyUpdate {
	ru.mutation.AddPoints(f)
	return ru
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (ru *ReplyUpdate) AddCommentIDs(ids ...int) *ReplyUpdate {
	ru.mutation.AddCommentIDs(ids...)
	return ru
}

// AddComment adds the "comment" edges to the Comment entity.
func (ru *ReplyUpdate) AddComment(c ...*Comment) *ReplyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCommentIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ru *ReplyUpdate) Mutation() *ReplyMutation {
	return ru.mutation
}

// ClearComment clears all "comment" edges to the Comment entity.
func (ru *ReplyUpdate) ClearComment() *ReplyUpdate {
	ru.mutation.ClearComment()
	return ru
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (ru *ReplyUpdate) RemoveCommentIDs(ids ...int) *ReplyUpdate {
	ru.mutation.RemoveCommentIDs(ids...)
	return ru
}

// RemoveComment removes "comment" edges to Comment entities.
func (ru *ReplyUpdate) RemoveComment(c ...*Comment) *ReplyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReplyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReplyUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReplyUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReplyUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *ReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reply.Table,
			Columns: reply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reply.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reply.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reply.FieldContent,
		})
	}
	if value, ok := ru.mutation.Points(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reply.FieldPoints,
		})
	}
	if value, ok := ru.mutation.AddedPoints(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reply.FieldPoints,
		})
	}
	if ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCommentIDs(); len(nodes) > 0 && !ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReplyUpdateOne is the builder for updating a single Reply entity.
type ReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReplyUpdateOne) SetUpdatedAt(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetContent sets the "content" field.
func (ruo *ReplyUpdateOne) SetContent(s string) *ReplyUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetPoints sets the "points" field.
func (ruo *ReplyUpdateOne) SetPoints(f float64) *ReplyUpdateOne {
	ruo.mutation.ResetPoints()
	ruo.mutation.SetPoints(f)
	return ruo
}

// AddPoints adds f to the "points" field.
func (ruo *ReplyUpdateOne) AddPoints(f float64) *ReplyUpdateOne {
	ruo.mutation.AddPoints(f)
	return ruo
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (ruo *ReplyUpdateOne) AddCommentIDs(ids ...int) *ReplyUpdateOne {
	ruo.mutation.AddCommentIDs(ids...)
	return ruo
}

// AddComment adds the "comment" edges to the Comment entity.
func (ruo *ReplyUpdateOne) AddComment(c ...*Comment) *ReplyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCommentIDs(ids...)
}

// Mutation returns the ReplyMutation object of the builder.
func (ruo *ReplyUpdateOne) Mutation() *ReplyMutation {
	return ruo.mutation
}

// ClearComment clears all "comment" edges to the Comment entity.
func (ruo *ReplyUpdateOne) ClearComment() *ReplyUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (ruo *ReplyUpdateOne) RemoveCommentIDs(ids ...int) *ReplyUpdateOne {
	ruo.mutation.RemoveCommentIDs(ids...)
	return ruo
}

// RemoveComment removes "comment" edges to Comment entities.
func (ruo *ReplyUpdateOne) RemoveComment(c ...*Comment) *ReplyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReplyUpdateOne) Select(field string, fields ...string) *ReplyUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reply entity.
func (ruo *ReplyUpdateOne) Save(ctx context.Context) (*Reply, error) {
	var (
		err  error
		node *Reply
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReplyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Reply)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReplyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReplyUpdateOne) SaveX(ctx context.Context) *Reply {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReplyUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReplyUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *ReplyUpdateOne) sqlSave(ctx context.Context) (_node *Reply, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reply.Table,
			Columns: reply.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reply.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reply.FieldID)
		for _, f := range fields {
			if !reply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reply.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reply.FieldContent,
		})
	}
	if value, ok := ruo.mutation.Points(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reply.FieldPoints,
		})
	}
	if value, ok := ruo.mutation.AddedPoints(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reply.FieldPoints,
		})
	}
	if ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: reply.CommentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reply{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
