directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Comment implements Node {
  content: String!
  createdAt: Time!
  id: ID!
  points: Float!
  post: [Post!]
  replies: [Reply!]
  updatedAt: Time!
}

"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Comment
}

"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Comments."""
  field: CommentOrderField!
}

"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATED_AT
  POINTS
  UPDATED_AT
}

"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  and: [CommentWhereInput!]

  """content field predicates"""
  content: String
  contentContains: String
  contentContainsFold: String
  contentEqualFold: String
  contentGT: String
  contentGTE: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIn: [String!]
  contentLT: String
  contentLTE: String
  contentNEQ: String
  contentNotIn: [String!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]

  """replies edge predicates"""
  hasReplies: Boolean
  hasRepliesWith: [ReplyWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: CommentWhereInput
  or: [CommentWhereInput!]

  """points field predicates"""
  points: Float
  pointsGT: Float
  pointsGTE: Float
  pointsIn: [Float!]
  pointsLT: Float
  pointsLTE: Float
  pointsNEQ: Float
  pointsNotIn: [Float!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Community implements Node {
  about: String!
  createdAt: Time!
  id: ID!
  name: String!
  updatedAt: Time!
  users: [User!]
}

"""A connection to a list of items."""
type CommunityConnection {
  """A list of edges."""
  edges: [CommunityEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CommunityEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Community
}

"""Ordering options for Community connections"""
input CommunityOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Communities."""
  field: CommunityOrderField!
}

"""Properties by which Community connections can be ordered."""
enum CommunityOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
CommunityWhereInput is used for filtering Community objects.
Input was generated by ent.
"""
input CommunityWhereInput {
  """about field predicates"""
  about: String
  aboutContains: String
  aboutContainsFold: String
  aboutEqualFold: String
  aboutGT: String
  aboutGTE: String
  aboutHasPrefix: String
  aboutHasSuffix: String
  aboutIn: [String!]
  aboutLT: String
  aboutLTE: String
  aboutNEQ: String
  aboutNotIn: [String!]
  and: [CommunityWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: CommunityWhereInput
  or: [CommunityWhereInput!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

input CreatePostInput {
  WriterID: Int
  content: String
  title: String
}

input CreateUserInput {
  password: String
  username: String
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  createUser(input: CreateUserInput!): String!
  deletePost(id: ID!): ID!
  deleteUser(id: ID!): ID!
  login(input: LoginInput!): String!
  refreshToken(input: RefreshTokenInput!): String!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  updateUser(id: ID!, input: UpdateUserInput!): User!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type Post implements Node {
  comments: [Comment!]
  content: String!
  createdAt: Time!
  id: ID!
  points: Float!
  title: String!
  updatedAt: Time!
  writer: User
}

"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Post
}

"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Posts."""
  field: PostOrderField!
}

"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATED_AT
  UPDATED_AT
}

"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  and: [PostWhereInput!]

  """content field predicates"""
  content: String
  contentContains: String
  contentContainsFold: String
  contentEqualFold: String
  contentGT: String
  contentGTE: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIn: [String!]
  contentLT: String
  contentLTE: String
  contentNEQ: String
  contentNotIn: [String!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]

  """writer edge predicates"""
  hasWriter: Boolean
  hasWriterWith: [UserWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: PostWhereInput
  or: [PostWhereInput!]

  """points field predicates"""
  points: Float
  pointsGT: Float
  pointsGTE: Float
  pointsIn: [Float!]
  pointsLT: Float
  pointsLTE: Float
  pointsNEQ: Float
  pointsNotIn: [Float!]

  """title field predicates"""
  title: String
  titleContains: String
  titleContainsFold: String
  titleEqualFold: String
  titleGT: String
  titleGTE: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIn: [String!]
  titleLT: String
  titleLTE: String
  titleNEQ: String
  titleNotIn: [String!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

type Query {
  UserPosts(userId: ID!): [Post!]!
  bye: String
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
  communities(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Communities returned from the connection."""
    orderBy: CommunityOrder

    """Filtering options for Communities returned from the connection."""
    where: CommunityWhereInput
  ): CommunityConnection!
  hello: String
  me: User

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  replies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Replies returned from the connection."""
    orderBy: ReplyOrder

    """Filtering options for Replies returned from the connection."""
    where: ReplyWhereInput
  ): ReplyConnection!
  topicrelateds(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for TopicRelateds returned from the connection."""
    where: TopicRelatedWhereInput
  ): TopicRelatedConnection!
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Topics returned from the connection."""
    where: TopicWhereInput
  ): TopicConnection!
  user(username: String!): Int!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}

input RefreshTokenInput {
  Token: String!
}

type Reply implements Node {
  comment: [Comment!]
  content: String!
  createdAt: Time!
  id: ID!
  points: Float!
  updatedAt: Time!
}

"""A connection to a list of items."""
type ReplyConnection {
  """A list of edges."""
  edges: [ReplyEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ReplyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Reply
}

"""Ordering options for Reply connections"""
input ReplyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Replies."""
  field: ReplyOrderField!
}

"""Properties by which Reply connections can be ordered."""
enum ReplyOrderField {
  CREATED_AT
  POINTS
  UPDATED_AT
}

"""
ReplyWhereInput is used for filtering Reply objects.
Input was generated by ent.
"""
input ReplyWhereInput {
  and: [ReplyWhereInput!]

  """content field predicates"""
  content: String
  contentContains: String
  contentContainsFold: String
  contentEqualFold: String
  contentGT: String
  contentGTE: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIn: [String!]
  contentLT: String
  contentLTE: String
  contentNEQ: String
  contentNotIn: [String!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """comment edge predicates"""
  hasComment: Boolean
  hasCommentWith: [CommentWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: ReplyWhereInput
  or: [ReplyWhereInput!]

  """points field predicates"""
  points: Float
  pointsGT: Float
  pointsGTE: Float
  pointsIn: [Float!]
  pointsLT: Float
  pointsLTE: Float
  pointsNEQ: Float
  pointsNotIn: [Float!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

scalar Time

type Topic implements Node {
  id: ID!
  name: String!
  relatedTopics: [Topic!]
  topicRelations: [TopicRelated!]
}

"""A connection to a list of items."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: Topic
}

type TopicRelated implements Node {
  id: ID!
  relatedTopic: Topic!
  relatedTopicID: ID!
  topic: Topic!
  topicID: ID!
}

"""A connection to a list of items."""
type TopicRelatedConnection {
  """A list of edges."""
  edges: [TopicRelatedEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TopicRelatedEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: TopicRelated
}

"""
TopicRelatedWhereInput is used for filtering TopicRelated objects.
Input was generated by ent.
"""
input TopicRelatedWhereInput {
  and: [TopicRelatedWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: TopicRelatedWhereInput
  or: [TopicRelatedWhereInput!]
}

"""
TopicWhereInput is used for filtering Topic objects.
Input was generated by ent.
"""
input TopicWhereInput {
  and: [TopicWhereInput!]

  """related_topics edge predicates"""
  hasRelatedTopics: Boolean
  hasRelatedTopicsWith: [TopicWhereInput!]

  """topic_relations edge predicates"""
  hasTopicRelations: Boolean
  hasTopicRelationsWith: [TopicRelatedWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TopicWhereInput
  or: [TopicWhereInput!]
}

input UpdatePostInput {
  content: String
  title: String
}

input UpdateUserInput {
  karma: Int
  password: String
}

type User implements Node {
  communities: [Community!]
  createdAt: Time!
  id: ID!
  karma: Int
  password: String!
  posts: [Post!]
  updatedAt: Time!
  username: String!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!

  """The item at the end of the edge."""
  node: User
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  KARMA
  UPDATED_AT
  USERNAME
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  and: [UserWhereInput!]

  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]

  """communities edge predicates"""
  hasCommunities: Boolean
  hasCommunitiesWith: [CommunityWhereInput!]

  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]

  """id field predicates"""
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]

  """karma field predicates"""
  karma: Int
  karmaGT: Int
  karmaGTE: Int
  karmaIn: [Int!]
  karmaIsNil: Boolean
  karmaLT: Int
  karmaLTE: Int
  karmaNEQ: Int
  karmaNotIn: [Int!]
  karmaNotNil: Boolean
  not: UserWhereInput
  or: [UserWhereInput!]

  """password field predicates"""
  password: String
  passwordContains: String
  passwordContainsFold: String
  passwordEqualFold: String
  passwordGT: String
  passwordGTE: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordIn: [String!]
  passwordLT: String
  passwordLTE: String
  passwordNEQ: String
  passwordNotIn: [String!]

  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]

  """username field predicates"""
  username: String
  usernameContains: String
  usernameContainsFold: String
  usernameEqualFold: String
  usernameGT: String
  usernameGTE: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIn: [String!]
  usernameLT: String
  usernameLTE: String
  usernameNEQ: String
  usernameNotIn: [String!]
}
