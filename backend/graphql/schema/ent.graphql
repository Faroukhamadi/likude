directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Comment implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  content: String!
  points: Float!
  post: [Post!]
  replies: [Reply!]
}
"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Comment connections"""
input CommentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Comments."""
  field: CommentOrderField!
}
"""Properties by which Comment connections can be ordered."""
enum CommentOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """points field predicates"""
  points: Float
  pointsNEQ: Float
  pointsIn: [Float!]
  pointsNotIn: [Float!]
  pointsGT: Float
  pointsGTE: Float
  pointsLT: Float
  pointsLTE: Float
  """post edge predicates"""
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
  """replies edge predicates"""
  hasReplies: Boolean
  hasRepliesWith: [ReplyWhereInput!]
}
type Community implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  about: String!
  users: [User!]
}
"""A connection to a list of items."""
type CommunityConnection {
  """A list of edges."""
  edges: [CommunityEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommunityEdge {
  """The item at the end of the edge."""
  node: Community
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Community connections"""
input CommunityOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Communities."""
  field: CommunityOrderField!
}
"""Properties by which Community connections can be ordered."""
enum CommunityOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
CommunityWhereInput is used for filtering Community objects.
Input was generated by ent.
"""
input CommunityWhereInput {
  not: CommunityWhereInput
  and: [CommunityWhereInput!]
  or: [CommunityWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """about field predicates"""
  about: String
  aboutNEQ: String
  aboutIn: [String!]
  aboutNotIn: [String!]
  aboutGT: String
  aboutGTE: String
  aboutLT: String
  aboutLTE: String
  aboutContains: String
  aboutHasPrefix: String
  aboutHasSuffix: String
  aboutEqualFold: String
  aboutContainsFold: String
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/Faroukhamadi/likude/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  content: String!
  points: Float!
  writer: [User!]
  comments: [Comment!]
}
"""A connection to a list of items."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Post connections"""
input PostOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Posts."""
  field: PostOrderField!
}
"""Properties by which Post connections can be ordered."""
enum PostOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """points field predicates"""
  points: Float
  pointsNEQ: Float
  pointsIn: [Float!]
  pointsNotIn: [Float!]
  pointsGT: Float
  pointsGTE: Float
  pointsLT: Float
  pointsLTE: Float
  """writer edge predicates"""
  hasWriter: Boolean
  hasWriterWith: [UserWhereInput!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
  communities(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Communities returned from the connection."""
    orderBy: CommunityOrder

    """Filtering options for Communities returned from the connection."""
    where: CommunityWhereInput
  ): CommunityConnection!
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Posts returned from the connection."""
    orderBy: PostOrder

    """Filtering options for Posts returned from the connection."""
    where: PostWhereInput
  ): PostConnection!
  replies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Replies returned from the connection."""
    orderBy: ReplyOrder

    """Filtering options for Replies returned from the connection."""
    where: ReplyWhereInput
  ): ReplyConnection!
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Topics returned from the connection."""
    where: TopicWhereInput
  ): TopicConnection!
  topicrelateds(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for TopicRelateds returned from the connection."""
    where: TopicRelatedWhereInput
  ): TopicRelatedConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Reply implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  content: String!
  points: Float!
  comment(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Comments returned from the connection."""
    orderBy: CommentOrder

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
}
"""A connection to a list of items."""
type ReplyConnection {
  """A list of edges."""
  edges: [ReplyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ReplyEdge {
  """The item at the end of the edge."""
  node: Reply
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Reply connections"""
input ReplyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Replies."""
  field: ReplyOrderField!
}
"""Properties by which Reply connections can be ordered."""
enum ReplyOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
ReplyWhereInput is used for filtering Reply objects.
Input was generated by ent.
"""
input ReplyWhereInput {
  not: ReplyWhereInput
  and: [ReplyWhereInput!]
  or: [ReplyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """points field predicates"""
  points: Float
  pointsNEQ: Float
  pointsIn: [Float!]
  pointsNotIn: [Float!]
  pointsGT: Float
  pointsGTE: Float
  pointsLT: Float
  pointsLTE: Float
  """comment edge predicates"""
  hasComment: Boolean
  hasCommentWith: [CommentWhereInput!]
}
type Topic implements Node {
  id: ID!
  name: String!
  relatedTopics: [Topic!]
  topicRelations: [TopicRelated!]
}
"""A connection to a list of items."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TopicEdge {
  """The item at the end of the edge."""
  node: Topic
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type TopicRelated implements Node {
  id: ID!
  topicID: ID!
  relatedTopicID: ID!
  topic: Topic!
  relatedTopic: Topic!
}
"""A connection to a list of items."""
type TopicRelatedConnection {
  """A list of edges."""
  edges: [TopicRelatedEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TopicRelatedEdge {
  """The item at the end of the edge."""
  node: TopicRelated
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TopicRelatedWhereInput is used for filtering TopicRelated objects.
Input was generated by ent.
"""
input TopicRelatedWhereInput {
  not: TopicRelatedWhereInput
  and: [TopicRelatedWhereInput!]
  or: [TopicRelatedWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
TopicWhereInput is used for filtering Topic objects.
Input was generated by ent.
"""
input TopicWhereInput {
  not: TopicWhereInput
  and: [TopicWhereInput!]
  or: [TopicWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """related_topics edge predicates"""
  hasRelatedTopics: Boolean
  hasRelatedTopicsWith: [TopicWhereInput!]
  """topic_relations edge predicates"""
  hasTopicRelations: Boolean
  hasTopicRelationsWith: [TopicRelatedWhereInput!]
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  username: String!
  password: String!
  karma: Int
  posts: [Post!]
  communities: [Community!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordEqualFold: String
  passwordContainsFold: String
  """karma field predicates"""
  karma: Int
  karmaNEQ: Int
  karmaIn: [Int!]
  karmaNotIn: [Int!]
  karmaGT: Int
  karmaGTE: Int
  karmaLT: Int
  karmaLTE: Int
  karmaIsNil: Boolean
  karmaNotNil: Boolean
  """posts edge predicates"""
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """communities edge predicates"""
  hasCommunities: Boolean
  hasCommunitiesWith: [CommunityWhereInput!]
}
