scalar Cursor

type PageInfo {
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: Cursor
	endCursor: Cursor
}

type UserConnection {
	totalCount: Int!
	pageInfo: PageInfo!
	edges: [UserEdge]
}

type UserEdge {
	node: User
	cursor: Cursor!
}

enum UserOrderField {
	CREATED_AT
	UPDATED_AT
}

enum OrderDirection {
	ASC
	DESC
}

input UserOrder {
	direction: OrderDirection!
	field: UserOrderField
}

type Mutation {
	createUser(input: CreateUserInput!): User!
	updateUser(id: ID!, input: UpdateUserInput!): User!
	deleteUser(id: ID!): ID!
}

type Query {
	users(
		after: Cursor
		first: Int
		before: Cursor
		last: Int
		orderBy: UserOrder
	): UserConnection!
	node(id: ID!): Node
	nodes(ids: [ID!]!): [Node]!
}

input CreateUserInput {
	username: String!
	password: String!
}

input UpdateUserInput {
	password: String
	karma: Int
}
