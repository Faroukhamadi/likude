// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Faroukhamadi/likude/ent/topic"
	"github.com/Faroukhamadi/likude/ent/topicrelated"
)

// TopicRelated is the model entity for the TopicRelated schema.
type TopicRelated struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// RelatedTopicID holds the value of the "related_topic_id" field.
	RelatedTopicID int `json:"related_topic_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TopicRelatedQuery when eager-loading is set.
	Edges TopicRelatedEdges `json:"edges"`
}

// TopicRelatedEdges holds the relations/edges for other nodes in the graph.
type TopicRelatedEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// RelatedTopic holds the value of the related_topic edge.
	RelatedTopic *Topic `json:"related_topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicRelatedEdges) TopicOrErr() (*Topic, error) {
	if e.loadedTypes[0] {
		if e.Topic == nil {
			// The edge topic was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.Topic, nil
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// RelatedTopicOrErr returns the RelatedTopic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TopicRelatedEdges) RelatedTopicOrErr() (*Topic, error) {
	if e.loadedTypes[1] {
		if e.RelatedTopic == nil {
			// The edge related_topic was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.RelatedTopic, nil
	}
	return nil, &NotLoadedError{edge: "related_topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TopicRelated) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case topicrelated.FieldID, topicrelated.FieldTopicID, topicrelated.FieldRelatedTopicID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TopicRelated", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TopicRelated fields.
func (tr *TopicRelated) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topicrelated.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case topicrelated.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				tr.TopicID = int(value.Int64)
			}
		case topicrelated.FieldRelatedTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field related_topic_id", values[i])
			} else if value.Valid {
				tr.RelatedTopicID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTopic queries the "topic" edge of the TopicRelated entity.
func (tr *TopicRelated) QueryTopic() *TopicQuery {
	return (&TopicRelatedClient{config: tr.config}).QueryTopic(tr)
}

// QueryRelatedTopic queries the "related_topic" edge of the TopicRelated entity.
func (tr *TopicRelated) QueryRelatedTopic() *TopicQuery {
	return (&TopicRelatedClient{config: tr.config}).QueryRelatedTopic(tr)
}

// Update returns a builder for updating this TopicRelated.
// Note that you need to call TopicRelated.Unwrap() before calling this method if this TopicRelated
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TopicRelated) Update() *TopicRelatedUpdateOne {
	return (&TopicRelatedClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TopicRelated entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TopicRelated) Unwrap() *TopicRelated {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TopicRelated is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TopicRelated) String() string {
	var builder strings.Builder
	builder.WriteString("TopicRelated(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TopicID))
	builder.WriteString(", ")
	builder.WriteString("related_topic_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.RelatedTopicID))
	builder.WriteByte(')')
	return builder.String()
}

// TopicRelateds is a parsable slice of TopicRelated.
type TopicRelateds []*TopicRelated

func (tr TopicRelateds) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
